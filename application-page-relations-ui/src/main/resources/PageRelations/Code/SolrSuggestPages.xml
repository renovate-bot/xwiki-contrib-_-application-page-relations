<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="PageRelations.Code.SolrSuggestPages" locale="">
  <web>PageRelations.Code</web>
  <name>SolrSuggestPages</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>PageRelations.Code.PageRelationsMacro</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>SolrSuggestPages</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>PageRelations.Code.SolrSuggestPages</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>17c83e0a-7e0c-4c47-88ad-4aeb1453b134</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 *  Customized from uicomponents/suggest/suggestPages.js with the following changes:
 *  -
 */

require.config({
  paths: {'xwiki-selectize': "$xwiki.getSkinFile('uicomponents/suggest/xwiki.selectize.js', true)"}
});

var pageIcon =  {
  cssClass: "fa fa-file-o",
  iconSetName: "Font Awesome",
  iconSetType: "FONT"};

require(['jquery', 'xwiki-selectize'], function($, xwikiSelectize) {
  var getSelectizeOptions = function(select) {
    return {
      create: false,
      // The document where the selected values are saved. Stored document references will be relative to this document.
      documentReference: select.data('documentReference'),
      dropdownParent: $('.page-relations-container form.page-relation-add'),
      // dropdownAlignment: 'right',
      placeholder: "$services.localization.render('pageRelations.add.selectPage')",
      // Where to look for pages. The following is supported:
      // * "wiki:wikiName" look for pages in the specified wiki
      // * "space:spaceReference" look for pages in the specified space
      searchScope: select.data('searchScope'),
      // We overwrite the list of search fields because we don't want to match the technical "WebHome" nested page name
      // that appears in the value.
      searchField: ['query', 'label', 'hint'],
      sortField: 'score',
      load: function(text, callback) {
        loadPages(text, this.settings).done(callback).fail(callback);
      },
      loadSelected: function(text, callback) {
        loadPage(text, this.settings).done(callback).fail(callback);
      }
    }
  };

  var processOptions = function(options) {
    // Resolve the document reference relative to the current document reference.
    if (!options.documentReference || typeof options.documentReference === 'string') {
      options.documentReference = XWiki.Model.resolve(options.documentReference, XWiki.EntityType.DOCUMENT,
        XWiki.currentDocument.documentReference);
    }
    // Resolve the search scope.
    options.searchScope = resolveEntityReference(options.searchScope || 'wiki:' + XWiki.currentWiki);
    return options;
  };

  /**
    * Resolves an entity reference from a string representation of the form "entityType:entityReference".
    */
  var resolveEntityReference = function(typeAndReference) {
    if (typeof typeAndReference === 'string') {
      try {
        return XWiki.Model.resolve(typeAndReference, null, XWiki.currentDocument.documentReference);
      } catch (e) {
        return null;
      }
    }
    return typeAndReference;
  };

  var loadPages = function(text, options) {
    // We store the searched text into a variable because we will need it as a workaround for Selectize
    // to not filter out the results returned by the Solr endpoint whose neither the title nor the hint 
    // matches the searched text.
    // References:
    // - Selectize uses the Sifter library to perform a sort and a filtering on the received results
    //   Sifter: https://github.com/brianreavis/sifter.js/
    // - Selectize issues:
    //   - [Disable sifter functionality?](https://github.com/selectize/selectize.js/issues/196)
    //   - [Disable automatic sort](https://github.com/selectize/selectize.js/issues/218)
    // - It seems there is no good workaround for not filtering out entries sent by the server,
    //   so we use this hack.
    options.query = text;
    var selectized = $('.suggest-pages');
    // The commented lines below clear Selectize cache on each request. Selectize performs wrong filtering in the following scenario):
    // 1) Search for "times" -&gt; "Modern Times" is returned
    // 2) Search for "goddard" -&gt; "Modern Times" is filtered out since its cached title, hint, and query (the previous one) do not match this new query.
    // Reference: [How to disable caching?](https://github.com/selectize/selectize.js/issues/1136)
    // However disabling caching has a side effect on subsequent dropdown opening: the items cannot be selected anymore
    // selectized[0].selectize.clear(true);
    // selectized[0].selectize.clearOptions(true);
    return $.getJSON(getRestSearchURL(options.searchScope), $.param({
      q: text,
      number: 10
    }, true)).then($.proxy(processPages, null, options));
  };

  var loadPage = function(value, options) {
    var documentReference = XWiki.Model.resolve(value, XWiki.EntityType.DOCUMENT, options.documentReference);
    var documentRestURL = new XWiki.Document(documentReference).getRestURL();
    return $.getJSON(documentRestURL, $.param({
      prettyNames: true
    })).then($.proxy(processPage, null, options)).then(function(page) {
      // An array is expected in xwiki.selectize.js
      return [page];
    });
  };

  var getRestSearchURL = function(searchScope) {
    return "${request.contextPath}/rest/wikis/query";
  };

  /**
    * Adapt the JSON returned by the REST call to the format expected by the Selectize widget.
    */
  var processPages = function(options, response) {
    if ($.isArray(response.searchResults)) {
      return response.searchResults.map($.proxy(processPage, null, options));
    } else {
      return [];
    }
  };

  var processPage = function(options, page) {
    // Value (relative to the current wiki, where it is saved)
    var documentReference = XWiki.Model.resolve(page.id, XWiki.EntityType.DOCUMENT);
    //var relativeReference = documentReference.relativeTo(options.documentReference.getRoot());
    // We need to store a full reference
    var value = XWiki.Model.serialize(documentReference);
    var label = page.title;
    var chain = documentReference.getReversedReferenceChain();
    var hint = chain.map(function(item) {
      return item.name;
    }).join(' / ');
    return {
      value: value,
      query: options.query,
      label: label,
      hint: hint,
      icon: pageIcon,
      url: new XWiki.Document(documentReference).getURL()
    };
  };

  $.fn.suggestPagesSolr = function(options) {
    return this.each(function() {
      var actualOptions = $.extend(getSelectizeOptions($(this)), options);
      $(this).xwikiSelectize(processOptions(actualOptions));
    });
  };
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
